<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mongoHost" elementType="Argument">
            <stringProp name="Argument.name">mongoHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mongoPort" elementType="Argument">
            <stringProp name="Argument.name">mongoPort</stringProp>
            <stringProp name="Argument.value">27017</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="databaseName" elementType="Argument">
            <stringProp name="Argument.name">databaseName</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="collectionName" elementType="Argument">
            <stringProp name="Argument.name">collectionName</stringProp>
            <stringProp name="Argument.value">zips</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="connect" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import org.bson.Document;

import java.util.Arrays;

try {
	MongoClientSettings settings = MongoClientSettings.builder()
		.applyToClusterSettings {builder -&gt; 
			builder.hosts(Arrays.asList(new ServerAddress(vars.get(&quot;mongoHost&quot;),vars.get(&quot;mongoPort&quot;).toInteger())))}
		.build();
	
	MongoClient mongoClient = MongoClients.create(settings);
	
	MongoDatabase database = mongoClient.getDatabase(vars.get(&quot;databaseName&quot;));
	MongoCollection&lt;Document&gt; collection = database.getCollection(vars.get(&quot;collectionName&quot;));
	
	vars.putObject(&quot;collection&quot;, collection);
	
	return &quot;Connected to &quot; + vars.get(&quot;collectionName&quot;);
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="read" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">
import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
	
MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);
for (Document cur : collection.find()) {
     log.info cur.toJson();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">8</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="read" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import org.bson.Document;
import org.bson.types.ObjectId;

try {
	MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);
	Document result = collection.find(eq(&quot;_id&quot;, new ObjectId(vars.get(&quot;occup&quot;)))).first();
	//Document result = collection.find(eq(&quot;firstName&quot;, &quot;Rocky&quot;)).last();
return result.toJson();
            log.info(vars.get(&quot;occup&quot;));     // output ${number} variable values
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">/home/user/Desktop/a.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="variableNames">occup</stringProp>
            </CSVDataSet>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="write" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;

import org.bson.Document;

import java.util.Arrays;

try {
	MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);
	
	Document document = new Document(&quot;firstName&quot;, &quot;Peter&quot;)
		.append(&quot;lastName&quot;, &quot;user&quot;)
		.append(&quot;age&quot;, 38)
		.append(&quot;occupation&quot;, &quot;Test&quot;)
		.append(&quot;skills&quot;, Arrays.asList(&quot;JMeter&quot;, &quot;Selenium&quot;))
		.append(&quot;adress&quot;, new Document(&quot;city&quot;, &quot;London&quot;)
			.append(&quot;street&quot;, &quot;saint&quot;)
			.append(&quot;house&quot;, 49));
	
	collection.insertOne(document);

	return &quot;Document inserted&quot;;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="update - one" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Updates.*;

import org.bson.Document;
import org.bson.types.ObjectId;

try {
MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);

collection.updateOne(
eq(&quot;_id&quot;, new ObjectId(&quot;6249cfa67927ca5c61725e89&quot;)),
combine(set(&quot;occupation&quot;, &quot;sales person&quot;), set(&quot;adress.city&quot;, &quot;new maxico&quot;), currentDate(&quot;lastModified&quot;)));

return &quot;Document modified&quot;;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="update - many" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Updates.*;

import org.bson.Document;
import org.bson.types.ObjectId;

try {
MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);

collection.updateMany(
eq(&quot;firstName&quot;, &quot;Peter&quot;),
combine(set(&quot;occupation&quot;, &quot;zzzzzzz&quot;), set(&quot;adress.city&quot;, &quot;yyyy&quot;), currentDate(&quot;lastModified&quot;)));

return &quot;Document modified&quot;;
}
catch (Exception e) {
SampleResult.setSuccessful(false);
SampleResult.setResponseCode(&quot;500&quot;);
SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="delete - many" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;

import org.bson.Document;

try {
	MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);
	
	collection.deleteMany(eq(&quot;firstName&quot;, &quot;Peter&quot;));

	return &quot;Document deleted&quot;;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="delete - one" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import static com.mongodb.client.model.Filters.*;

import org.bson.Document;

try {
	MongoCollection&lt;Document&gt; collection = vars.getObject(&quot;collection&quot;);

	collection.deleteOne(eq(&quot;occupation&quot;, &quot;Test&quot;));

	return &quot;Document deleted&quot;;
}
catch (Exception e) {
	SampleResult.setSuccessful(false);
	SampleResult.setResponseCode(&quot;500&quot;);
	SampleResult.setResponseMessage(&quot;Exception: &quot; + e);
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
